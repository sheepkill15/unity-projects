// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
Texture2D<float4> Source;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
int _Steps;
float _MaxDistance;
float _MinDistance;

float4 _WorldSpaceLightPos0;
float4 _LightColor0;

float _SpecularPower;
float _Gloss;

float _BlendK;

float _MandelPower;

struct Shape
{
    uint type;
    float3 center;
    float3 size;
    float4 color;
};

StructuredBuffer<Shape> Shapes;
int ShapeCount;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(const float3 origin, const float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    const float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;

    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

float DistanceToSphere(const float3 pos, const float3 sp_center, const float sp_radius)
{
    return distance(pos, sp_center) - sp_radius;
}

float vmax(const float3 v)
{
    return max(max(v.x, v.y), v.z);
}

float DistanceToBox(const float3 pos, const float3 sd_center, const float3 sd_size)
{
    const float3 o = abs(pos - sd_center) - sd_size;
    const float ud = length(max(o, 0));
    const float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

float DistanceToTorus(const float3 pos, const float3 st_center, const float3 st_size)
{
    const float2 q = float2(length((pos - st_center).xz) - st_size.x, (pos - st_center).y);
    return length(q) - st_size.y;
}

float Mandelbrot(const float3 pos, const float3 center, const float size)
{
    float3 z = pos;
    float dr = 1.0;
    float r = 0.0;
    for (int i = 0; i < 15 ; i++) {
        r = length(z);
        if (r>2) break;
		
        // convert to polar coordinates
        float theta = acos(z.z/r);
        float phi = atan2(z.y,z.x);
        dr =  pow( r, _MandelPower-1.0)*_MandelPower*dr + 1.0;
		
        // scale and rotate the point
        float zr = pow( r,_MandelPower);
        theta = theta*_MandelPower;
        phi = phi*_MandelPower;
		
        // convert back to cartesian coordinates
        z = zr*float3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
        z+=pos;
    }
    return 0.5*log(r)*r/dr;
}

float4 Blend(const  float a,const  float b,const  float3 colA,const  float3 colB,const  float k )
{
    const float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    const float blendDst = lerp( b, a, h ) - k*h*(1.0-h);
    const float3 blendCol = lerp(colB,colA,h);
    return float4(blendCol, blendDst);
}

float4 DistanceToScene(const float3 pos)
{
    // return DistanceToSphere(pos, 0, 1);
    // return DistanceToBox(pos, 0, float3(.5, .5, .5));
    float d = 100;
    float3 col = 1;
    // for(int i = 0; i < ShapeCount; i++)
    // {
    //     float newD;
    //     switch (Shapes[i].type)
    //     {
    //         case 1:
    //             newD = DistanceToSphere(pos, Shapes[i].center, Shapes[i].size.x);
    //             break;
    //         case 2:
    //             newD = DistanceToBox(pos, Shapes[i].center, Shapes[i].size);
    //             break;
    //         case 3:
    //             newD = DistanceToTorus(pos, Shapes[i].center, Shapes[i].size);
    //             break;
    //         default:
    //             newD = 0;
    //             break;
    //     }
    //     const float4 res = Blend(d, newD, col, Shapes[i].color.rgb, _BlendK);
    //     d = res.w;
    //     col = saturate(res.rgb);
    // }
    d = Mandelbrot(pos, 0, 0);
    return float4(col, d);
}

// #include "Lighting.cginc"
float4 simpleLambert(const float3 orig, const float3 normal, const float3 viewDirection)
{
    const float3 lightDir = _WorldSpaceLightPos0.xyz;
    const float3 lightCol = _LightColor0.rgb;

    const float3 NdotL = max(dot(normal, lightDir), 0.1);
    float4 c;

    const float3 h = (lightDir - viewDirection) / 2.;
    const float s = pow(max(dot(normal, h), 0.0), _SpecularPower) * _Gloss;
    c.rgb = saturate(lightCol * NdotL * orig + s);
    c.a = 1;
    return c;
}

float3 normal(const float3 pos)
{
    const float eps = 0.001f;
    return normalize(
        float3(
            DistanceToScene(pos + float3(eps, 0, 0)).w - DistanceToScene(pos - float3(eps, 0, 0)).w,
            DistanceToScene(pos + float3(0, eps, 0)).w - DistanceToScene(pos - float3(0, eps, 0)).w,
            DistanceToScene(pos + float3(0, 0, eps)).w - DistanceToScene(pos - float3(0, 0, eps)).w
            ));
}

float4 renderSurface(const float3 orig, const Ray ray)
{
    const float3 n = normal(ray.origin);
    return simpleLambert(orig, n, ray.direction);
}

float4 Raymarch(Ray ray)
{
    int sum = 0;
    for(int i = 0; i < _Steps && sum < _MaxDistance; i++)
    {
        const float4 result = DistanceToScene(ray.origin);
        const float dist = result.w;
        ray.origin += dist * ray.direction;
        if(dist < _MinDistance)
        {
            return renderSurface(result.rgb, ray);
        }
        sum += dist;
    }
    return 0;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    const float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.f - 1.f);
    const Ray ray = CreateCameraRay(uv);
    const float4 res = Raymarch(ray);
    // Result[id.xy] = res == 0 ? Source[id.xy] : res;
    Result[id.xy] = res;
}
